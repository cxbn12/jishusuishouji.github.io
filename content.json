[{"title":"是该抛弃Spring HibernateTemplate的时候了","date":"2017-01-09T14:26:48.000Z","path":"2017/01/09/java/spring/是该抛弃Spring_HibernateTemplate的时候了/","text":"在spring2.0之前，我们在使用hibernate和spring的时候，都会被HibernateTemplate为我们提供benefits（资源和事务管理以及把那个“丑陋”的checked exception转换为runtime exception-DataAccessException ）而折服，在项目中不由自主、不假思索地使用它和那个经典的callback方法。而如今，hibernate3.0.1+ 、spring 2.0+版本以后，我们可以在数据访问层直接使用hinberate的session API(例如SessionFactory.getCurrentSession)，不并担心session和transaction management。至于error handling可以通过spring的@Repository annotation和post processor-PersistenceExceptionTranslationPostProcessor来解决。让我们来看一些代码片段：123456789&lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate3. LocalSessionFactoryBean&quot;&gt; &lt;!-- the properties setting--&gt; &lt;/bean&gt; &lt;bean id=&quot;accountRepo&quot; class=&quot;com.mycompany.HibernateAccountRepository&quot;&gt; &lt;constructor-arg ref=&quot;sessionFactory&quot;&gt;&lt;/constructor-arg&gt; &lt;/bean&gt; &lt;bean class=&quot;org.springframework.dao.annotation. PersistenceExceptionTranslationPostProcessor&quot;/&gt; 数据访问层代码片段：123456789101112131415@Repository public class HibernateAccountRepository implements AccountRepository &#123; private SessionFactory factory; public HibernateAccountRepository(SessionFactory factory) &#123; this.factory = factory; &#125; public Account loadAccount(String username) &#123; return (Account)factory.getCurrentSession() .createQuery(&quot;from Account acc where acc.name = :name&quot;) .setParameter(&quot;name&quot;, &quot;thethirdpart&quot;).uniqueResult(); &#125; &#125; 在xml配置文件里面通过配置的post processor会自动检测@Repository标注的bean并为该bean打开exception转换功能。 如果不支持annotations，可以通过AOP来实现，更方便123456&lt;bean id=&quot;persistenceExceptionInterceptor&quot; class=&quot;org.springframework.dao.support.PersistenceExceptionTranslationInterceptor&quot;/&gt; &lt;aop:config&gt; &lt;aop:advisor pointcut=&quot;execution(* *..*Repository+.*(..))&quot; advice-ref=&quot;persistenceExceptionInterceptor&quot; /&gt; &lt;/aop:config&gt; 总结，我们应该选择哪种方式呢？还是那句话，根据不同的情况来做最正确的选择。但我建议是丢弃template，而直接使用hibernate的API，毕竟灵活性更大，更何况遇到复杂的情况我们始终得面对hibernate的API。spring并不强制你做任何事情，记得它是一个非侵入性的framework。","tags":[{"name":"java","slug":"java","permalink":"http://jishusuishouji.github.io/tags/java/"},{"name":"spring","slug":"spring","permalink":"http://jishusuishouji.github.io/tags/spring/"}]},{"title":"So should you still use Spring's HibernateTemplate and/or JpaTemplate??","date":"2017-01-09T14:20:51.000Z","path":"2017/01/09/java/spring/So_should_you_still_use_Spring_s_HibernateTemplate_and_or_JpaTemplate__/","text":"I was reading an article by Vigil Bose on TSS the other day and saw the usage of the HibernateDaoSupport class. Since this is no longer a recommended way of using Hibernate from Spring, I thought I might as well just blog about it another time. 不建议使用HibernateDaoSupport。 With the advent(n. 到来；出现；) of Spring 2.0, it has become possible to start using the Hibernate Session API directly again. The question is whether or not it is wise to abandon the use of the HibernateTemplate when working with Hibernate, or any other template-based approaches Spring features.","tags":[{"name":"java","slug":"java","permalink":"http://jishusuishouji.github.io/tags/java/"},{"name":"spring","slug":"spring","permalink":"http://jishusuishouji.github.io/tags/spring/"},{"name":"hibernate","slug":"hibernate","permalink":"http://jishusuishouji.github.io/tags/hibernate/"},{"name":"HibernateTemplate","slug":"HibernateTemplate","permalink":"http://jishusuishouji.github.io/tags/HibernateTemplate/"}]},{"title":"java分布式事务(JTA)实现 jotm和atomikos","date":"2017-01-08T02:03:52.000Z","path":"2017/01/08/java/jta/java分布式事务_JTA_实现 jotm和atomikos/","text":"本地事务：只对单一数据源(单个数据库)事务进行控制。分布式事务：处理多种异构的数据源， 比如某个业务操作中同时包含JDBC和JMS或者某个操作需要访问多个不同的数据库，在不同数据库之间进行事务控制。 在Java中，分布式事务主要的规范是JTA/XA。其中：JTA是Java的事务管理器规范，XA是工业标准的X/Open CAE规范，可被两阶段提交及回滚的事务资源定义。比如某数据库实现了XA规范，则不管是JTA，还是MSDTC，都可以基于同样的行为对该数据库进行事务处理。 JTA全称为Java Transaction API，顾名思义JTA定义了一组统一的事务编程的接口，这些接口如下： XAResource：XAResource接口是对实现了X/Open CAE规范的资源管理器 (Resource Manager，数据库就是典型的资源管理器) 的抽象，它由资源适配器 (Resource Apdater) 提供实现。XAResource是支持事务控制的核心。Transaction：Transaction接口是一个事务实例的抽象，通过它可以控制事务内多个资源的提交或者回滚。二阶段提交过程也是由Transaction接口的实现者来完成的。TransactionManager：托管模式 (managed mode) 下，TransactionManager接口是被应用服务器调用，以控制事务的边界的。UserTransaction：非托管模式 (non-managed mode) 下，应用程序可以通过UserTransaction接口控制事务的边界 在tomcat下是没有分布式事务的，可以借助于第三方Jotm和Automikos实现，在spring中分布式事务是通过jta（jotm，atomikos）来进行实现。即：通过代码的方式来决定是否是分布式事务。 注：推荐用服务器自己的数据源(也就是 lookup JNDI)，这样的话，是不是XA事务就由服务器的配置来定制，代码就不需要任何配置来决定是不是XA了。事务本身是不是XA (分布式的）是服务器的事，服务器来管理“资源” （包括数据源，JMS 连接等，一个资源（JDBC连接）如何参与事务是“资源管理器”（驱动程序）的职责，跟程序无关），服务器提供事务管理并作为“事务协调者”来处理多个“资源管理器”（不同的数据库连接）之间的事务一致性。 jotm和automikos网址：1、http://jotm.objectweb.org/2、http://www.atomikos.com/Main/TransactionsEssentials Spring 通过AOP技术可以让我们在脱离EJB的情况下享受声明式事务的丰盛大餐。此外，通过配合使用ObjectWeb的JOTM开源项目，不需要Java EE应用服务器，Spring也可以提供JTA事务。 正因为AOP让Spring拥有了脱离EJB容器的声明式事务能力，而JOTM让我们在脱离Java EE应用服务器下拥有JTA事务能力。所以，人们将AOP和JOTM称为Java软件开发的两个圣杯。 JTA的实现框架有：GeronimoTM/Jencks 官方文档比较少，不适合学习和维护。SimpleJTA 没有实现JTS (Java Transaction Service)而且不是活跃的。Atomikos 是一个另人钦佩的产品。有丰富的文档，而且有很好的支持。JBossTS 是一个应用在JBOSS服务器上的，肯定是一个成熟的产品，也有好的支持，详细信息可以看这里：http://www.theserverside.com/news/thread.tss?thread_id=37941最常见的二个如下：JOTM JOTM(Java Open Transaction Manager)是ObjectWeb的一个开源JTA实现，它本身也是开源应用程序服务器JOnAS(Java Open Application Server)的一部分，为其提供JTA分布式事务的功能。 存在的问题：使用中不能自动rollback，无论什么情况都commit。注：spring3开始已经不再支持jotm Atomikos 大家推荐最多的。和JOTM相比Atomikos Transactions Essentials更加稳定，它原来是商业项目，现在开源了。象MySQL一样卖服务支持的。而且论坛页比较活跃，有问题很快可以解决。","tags":[{"name":"java","slug":"java","permalink":"http://jishusuishouji.github.io/tags/java/"},{"name":"jta","slug":"jta","permalink":"http://jishusuishouji.github.io/tags/jta/"},{"name":"分布式事务","slug":"分布式事务","permalink":"http://jishusuishouji.github.io/tags/分布式事务/"},{"name":"jotm","slug":"jotm","permalink":"http://jishusuishouji.github.io/tags/jotm/"},{"name":"atomikos","slug":"atomikos","permalink":"http://jishusuishouji.github.io/tags/atomikos/"}]},{"title":"java分布式事务:spring+JTA+jotm","date":"2017-01-08T01:23:24.000Z","path":"2017/01/08/java/jta/java分布式事务_spring_JTA_jotm/","text":"业务背景当新建用户时需插入一条用户记录，同时还需在另一个DB中记录日志。因为是不同的DB操作，所以及到分布式事务的处理。 1、代码结构： 2、建表语句：1234567create database log; DROP TABLE IF EXISTS `log`; CREATE TABLE `log` ( `id` varchar(20) NOT NULL, `content` varchar(100) default NULL, PRIMARY KEY (`id`) ); 1234567create database user; DROP TABLE IF EXISTS `user`; CREATE TABLE `user` ( `id` varchar(20) NOT NULL, `name` varchar(40) default NULL, PRIMARY KEY (`id`) ); 3、配置文件application.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;!--?xml version=1.0 encoding=UTF-8?--&gt; &lt;beans aop=&quot;&quot; beans=&quot;&quot; http:=&quot;&quot; schema=&quot;&quot; spring-aop.xsd=&quot;&quot; spring-beans.xsd=&quot;&quot; spring-tx.xsd=&quot;&quot; tx=&quot;&quot; www.springframework.org=&quot;&quot; xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemalocation=&quot;http://www.springframework.org/schema/beans&quot;&gt; &lt;!-- 引用Spring内部所提供的对JOTM支持的工厂类 --&gt; &lt;bean class=&quot;org.springframework.transaction.jta.JotmFactoryBean&quot; id=&quot;jotm&quot;/&gt; &lt;!-- 配置JTA事务管理器, 并在管理器中使用上面所配置的JOTM --&gt; &lt;bean class=&quot;org.springframework.transaction.jta.JtaTransactionManager&quot; id=&quot;txManager&quot;&gt; &lt;property name=&quot;userTransaction&quot; ref=&quot;jotm&quot;/&gt; &lt;/bean&gt; &lt;!-- 配置多个数据源 --&gt; &lt;bean class=&quot;org.enhydra.jdbc.pool.StandardXAPoolDataSource&quot; destroy-method=&quot;shutdown&quot; id=&quot;db1&quot;&gt; &lt;property name=&quot;dataSource&quot;&gt; &lt;bean class=&quot;org.enhydra.jdbc.standard.StandardXADataSource&quot; destroy-method=&quot;shutdown&quot;&gt; &lt;property name=&quot;transactionManager&quot; ref=&quot;jotm&quot;/&gt; &lt;property name=&quot;driverName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:MySQL://localhost:3306/user&quot;/&gt; &lt;/bean&gt; &lt;/property&gt; &lt;property name=&quot;user&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt; &lt;/bean&gt; &lt;bean class=&quot;org.enhydra.jdbc.pool.StandardXAPoolDataSource&quot; destroy-method=&quot;shutdown&quot; id=&quot;db2&quot;&gt; &lt;property name=&quot;dataSource&quot;&gt; &lt;bean class=&quot;org.enhydra.jdbc.standard.StandardXADataSource&quot; destroy-method=&quot;shutdown&quot;&gt; &lt;property name=&quot;transactionManager&quot; ref=&quot;jotm&quot;/&gt; &lt;property name=&quot;driverName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:MySQL://localhost:3306/log&quot;/&gt; &lt;/bean&gt; &lt;/property&gt; &lt;property name=&quot;user&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt; &lt;/bean&gt; &lt;!-- 根据不同的数据源配置两个jdbcTemplate --&gt; &lt;bean class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot; id=&quot;jdbcTemplate1&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;db1&quot;/&gt; &lt;/bean&gt; &lt;bean class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot; id=&quot;jdbcTemplate2&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;db2&quot;/&gt; &lt;/bean&gt; &lt;bean class=&quot;com.zdp.dao.UserDao&quot; id=&quot;userDao&quot;&gt; &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate1&quot;/&gt; &lt;/bean&gt; &lt;bean class=&quot;com.zdp.dao.LogDao&quot; id=&quot;logDao&quot;&gt; &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate2&quot;/&gt; &lt;/bean&gt; &lt;bean class=&quot;com.zdp.service.UserService&quot; id=&quot;userService&quot;/&gt; &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;/&gt; &lt;property name=&quot;logDao&quot; ref=&quot;logDao&quot;/&gt; &lt;/bean&gt; &lt;!-- JTA事务传播特性 --&gt; &lt;tx:advice id=&quot;txAdviceJTA&quot; transaction-manager=&quot;txManager&quot;&gt; &lt;tx:attributes&gt; &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt; &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;add*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt; &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;create*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt; &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt; &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;del*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt; &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt; &lt;tx:method name=&quot;*&quot; read-only=&quot;true/&quot;&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;/beans&gt; 4、service业务类：1234567891011121314151617181920212223242526public class UserService &#123; private UserDao userDao; private LogDao logDao; public void saveUser(String id, String name) &#123; userDao.insertUser(id, name); // int i = 1 / 0; // 制造异常 logDao.insertLog(id, id + _ + name); &#125; public UserDao getUserDao() &#123; return userDao; &#125; public void setUserDao(UserDao userDao) &#123; this.userDao = userDao; &#125; public LogDao getLogDao() &#123; return logDao; &#125; public void setLogDao(LogDao logDao) &#123; this.logDao = logDao; &#125; &#125; 5、dao类：123456public class UserDao extends JdbcDaoSupport &#123; public void insertUser(String id, String name) &#123; JdbcTemplate template = getJdbcTemplate(); template.execute(insert into user values(&apos; + id + &apos;,&apos; + name + &apos;)); &#125; &#125; 123456public class LogDao extends JdbcDaoSupport &#123; public void insertLog(String id, String content) &#123; JdbcTemplate template = getJdbcTemplate(); template.execute(insert into log values(&apos; + id + &apos;,&apos; + content + &apos;)); &#125; &#125; 6、测试类：12345678public class UserTest &#123; @Test public void testSave() &#123; ApplicationContext cxt = new ClassPathXmlApplicationContext(ApplicationContext.xml); UserService us = (UserService) cxt.getBean(userService); us.saveUser(1, zhangsan); &#125; &#125;","tags":[{"name":"java","slug":"java","permalink":"http://jishusuishouji.github.io/tags/java/"},{"name":"jta","slug":"jta","permalink":"http://jishusuishouji.github.io/tags/jta/"},{"name":"jotm","slug":"jotm","permalink":"http://jishusuishouji.github.io/tags/jotm/"},{"name":"spring","slug":"spring","permalink":"http://jishusuishouji.github.io/tags/spring/"}]}]