<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术随手记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jishusuishouji.github.io/"/>
  <updated>2017-01-25T06:25:44.037Z</updated>
  <id>http://jishusuishouji.github.io/</id>
  
  <author>
    <name>技术随手记</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VAGRANT 和 Docker的使用场景和区别?</title>
    <link href="http://jishusuishouji.github.io/2017/01/25/xunihua/VAGRANT_%E5%92%8C_Docker%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E5%92%8C%E5%8C%BA%E5%88%AB_/"/>
    <id>http://jishusuishouji.github.io/2017/01/25/xunihua/VAGRANT_和_Docker的使用场景和区别_/</id>
    <published>2017-01-25T06:20:57.000Z</published>
    <updated>2017-01-25T06:25:44.037Z</updated>
    
    <content type="html"><![CDATA[<p>本质区别<br>Vagrant并不提供虚拟化技术，本质上是一个虚拟机外挂，通过虚拟机的管理接口来管理虚拟机，让用户更轻松的进行一些常用配置，比如：CPU/Memory/IP/DISK等分配。并且提供了一些其它的管理操作：比如开机运行指定命令，镜像二次打包，插件编写等等。<br>vagrant官方有介绍:</p>
<blockquote>
<p>To achieve its magic, Vagrant stands on the shoulders of giants. Machines are provisioned on top of VirtualBox, VMware, AWS, or any other provider. Then, industry-standard provisioning tools such as shell scripts, Chef, or Puppet, can be used to automatically install and configure software on the machine.</p>
</blockquote>
<p>而docker是一个容器引擎，每一个实例是一个相对隔离的空间，与宿主机共享操作系统内核，并且共享宿主机资源。相对于披着虚拟机皮的vagrant，docker更加轻量，消耗更少的资源。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>关于应用场景没有绝对，把两个东西都用熟，自己觉得用哪个方便用哪个好管理就用哪个。既然vagrant本质是虚拟机外挂，那么它的应用场景就是，节省你用原生虚拟机管理软件的时间。原来我们新增一台虚拟机需要配置好内存、硬盘、CPU等，然后添加iso，安装。创建用户，等等。一套下来好几十分钟是吧？聪明点你可能会想到复制一个创建好的镜像然后粘贴。但这一切vagrant都帮你想好了,安装vagrant后你只需要6步就能创建一台新的虚拟机，其中两步是创建文件夹和切换文件夹。<br>从安装到创建一台新的虚拟机就成功了。如果你想要再添加一台虚拟机，你只需要执行最后两步，添加一个不同名字的配置就能再新建一台虚拟机。还支持镜像、开机自动运行脚本、插件编写等。dockerdocker主要应用于解决环境依赖以及为应用程序提供一个相对隔离的空间，一个实例像操作系统里运行的一个程序。原来部署一套环境是不是得自己编写自动化部署依赖环境以及程序的脚本？如果有两个依赖同一程序或库的不同版本怎么办？绝对路径？软连接？docker能很好的解决你的烦恼。把需要的依赖环境打包成一个镜像，再把程序放镜像里面运行。</p>
<p>总的来说vagrant更适合给开发大爷们创造一个统一的开发、测试、接近于完全隔离的环境，以及提高对高配机的闲置利用。docker更方便地解决了同一机器上的环境隔离，以及提高运维锅们解决部署时环境依赖的效率。</p>
]]></content>
    
    <summary type="html">
    
      VAGRANT 和 Docker的使用场景和区别?
    
    </summary>
    
      <category term="docker" scheme="http://jishusuishouji.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://jishusuishouji.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 Velocity 模板引擎快速生成代码</title>
    <link href="http://jishusuishouji.github.io/2017/01/22/java/velocity/%E4%BD%BF%E7%94%A8_Velocity_%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <id>http://jishusuishouji.github.io/2017/01/22/java/velocity/使用_Velocity_模板引擎快速生成代码/</id>
    <published>2017-01-21T23:35:11.000Z</published>
    <updated>2017-01-24T01:04:31.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Velocity-模板引擎介绍"><a href="#Velocity-模板引擎介绍" class="headerlink" title="Velocity 模板引擎介绍"></a>Velocity 模板引擎介绍</h2><p>在现今的软件开发过程中，软件开发人员将更多的精力投入在了重复的相似劳动中。特别是在如今特别流行的MVC架构模式中，软件各个层次的功能更加独立，同时代码的相似度也更加高。所以我们需要寻找一种来减少软件开发人员重复劳动的方法，让程序员将更多的精力放在业务逻辑以及其他更加具有创造力的工作上。Velocity这个模板引擎就可以在一定程度上解决这个问题。<br>Velocity是一个基于Java的模板引擎框架，提供的模板语言可以使用在Java中定义的对象和变量上。Velocity是Apache基金会的项目，开发的目标是分离MVC模式中的持久化层和业务层。但是在实际应用过程中，Velocity不仅仅被用在了MVC的架构中，还可以被用在以下一些场景中。</p>
<p>1.Web应用：开发者在不使用JSP的情况下，可以用Velocity让HTML具有动态内容的特性。<br>2.源代码生成：Velocity可以被用来生成Java代码、SQL或者PostScript。有很多开源和商业开发的软件是使用Velocity来开发的。<br>3.自动Email：很多软件的用户注册、密码提醒或者报表都是使用Velocity来自动生成的。使用Velocity可以在文本文件里面生成邮件内容，而不是在Java代码中拼接字符串。<br>4.转换xml：Velocity提供一个叫 Anakia 的ant任务，可以读取XML文件并让它能够被 Velocity模板读取。一个比较普遍的应用是将xdoc文档转换成带样式的HTML文件。</p>
<h2 id="Hello-Velocity"><a href="#Hello-Velocity" class="headerlink" title="Hello Velocity"></a>Hello Velocity</h2><p>和学习所有新的语言或者框架的顺序一样，我们从Hello Velocity开始学习。首先在Velocity的官网上下载最新的发布包，之后使用Eclipse建立普通的Java项目。引入解压包中的 velocity-1.7.jar和lib文件夹下面的jar包。这样我们就可以在项目中使用Velocity了。<br>在做完上面的准备工作之后，就可以新建一个叫<code>HelloVelocity</code>的类，代码如下：</p>
<h3 id="清单-1-HelloVelocity-java"><a href="#清单-1-HelloVelocity-java" class="headerlink" title="清单 1. HelloVelocity.java"></a>清单 1. HelloVelocity.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class HelloVelocity &#123;</div><div class="line"> public static void main(String[] args) &#123;</div><div class="line"> VelocityEngine ve = new VelocityEngine();</div><div class="line"> ve.setProperty(RuntimeConstants.RESOURCE_LOADER, &quot;classpath&quot;);</div><div class="line"> ve.setProperty(&quot;classpath.resource.loader.class&quot;, ClasspathResourceLoader.class.getName());</div><div class="line"> </div><div class="line"> ve.init();</div><div class="line"> </div><div class="line"> Template t = ve.getTemplate(&quot;hellovelocity.vm&quot;);</div><div class="line"> VelocityContext ctx = new VelocityContext();</div><div class="line"> </div><div class="line"> ctx.put(&quot;name&quot;, &quot;velocity&quot;);</div><div class="line"> ctx.put(&quot;date&quot;, (new Date()).toString());</div><div class="line"> </div><div class="line"> List temp = new ArrayList();</div><div class="line"> temp.add(&quot;1&quot;);</div><div class="line"> temp.add(&quot;2&quot;);</div><div class="line"> ctx.put(&quot;list&quot;, temp);</div><div class="line"> </div><div class="line"> StringWriter sw = new StringWriter();</div><div class="line"> </div><div class="line"> t.merge(ctx, sw);</div><div class="line"> </div><div class="line"> System.out.println(sw.toString());</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>HelloVelocity</code>的代码中，首先<code>new</code>了一个<code>VelocityEngine</code>类，这个类设置了Velocity使用的一些配置，在初始化引擎之后就可以读取<code>hellovelocity.vm</code>这个模板生成的<code>Template</code>这个类。之后的<code>VelocityContext</code>类是配置<code>Velocity</code>模板读取的内容。这个<code>context</code>可以存入任意类型的对象或者变量，让<code>template</code>来读取。这个操作就像是在使用JSP开发时，往<code>request</code>里面放入key-value，让JSP 读取一样。<br>接下来就是写<code>hellovelocity.vm</code>文件了，这个文件实际定义了Velocity的输出内容和格式。<code>hellovelocity.vm</code>的内容如下：</p>
<h3 id="清单-2-Hellovelocity-vm"><a href="#清单-2-Hellovelocity-vm" class="headerlink" title="清单 2. Hellovelocity.vm"></a>清单 2. Hellovelocity.vm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#set( $iAmVariable = &quot;good!&quot; )</div><div class="line">Welcome $name to velocity.com</div><div class="line">today is $date.</div><div class="line">#foreach ($i in $list)</div><div class="line">$i</div><div class="line">#end</div><div class="line">$iAmVariable</div></pre></td></tr></table></figure>
<p>输出结果如下：<br>Welcome velocity to velocity.com<br>today is Sun Mar 23 19:19:04 CST 2014.<br>1<br>2<br>good!<br>在输出结果中我们可以看到，$name、$date 都被替换成了在 HelloVelocity.java 里面定义的变量，在 foreach 语句里面遍历了 list 的每一个元素，并打印出来。而$iAmVariable 则是在页面中使用 #set 定义的变量。<br>回页首<br>基本模板语言语法使用<br>在 hellovelocity.vm 里面可以看到很多以 # 和$符开头的内容，这些都是 Velocity 的语法。在 Velocity 中所有的关键字都是以 # 开头的，而所有的变量则是以$开头。Velocity 的语法类似于 JSP 中的 JSTL，甚至可以定义类似于函数的宏，下面来看看具体的语法规则。<br>一、变量<br>和我们所熟知的其他编程语言一样，Velocity 也可以在模板文件中有变量的概念。</p>
<ol>
<li>变量定义<br>#set($name =“velocity”)<br>等号后面的字符串 Velocity 引擎将重新解析，例如出现以$开始的字符串时，将做变量的替换。<br>#set($hello =“hello $name”)<br>上面的这个等式将会给$hello 赋值为“hello velocity”</li>
<li>变量的使用<br>在模板文件中使用$name 或者${name} 来使用定义的变量。推荐使用${name} 这种格式，因为在模板中同时可能定义了类似$name 和$names 的两个变量，如果不选用大括号的话，引擎就没有办法正确识别$names 这个变量。<br>对于一个复杂对象类型的变量，例如$person，可以使用${person.name} 来访问 person 的 name 属性。值得注意的是，这里的${person.name} 并不是直接访问 person 的 name 属性，而是访问 person 的 getName() 方法，所以${person.name} 和${person.getName()} 是一样的。</li>
<li>变量赋值<br>在第一小点中，定义了一个变量，同时给这个变量赋了值。对于 Velocity 来说，变量是弱数据类型的，可以在赋了一个 String 给变量之后再赋一个数字或者数组给它。可以将以下六种数据类型赋给一个 Velocity 变量：变量引用, 字面字符串, 属性引用, 方法引用, 字面数字, 数组列表。<br>#set($foo = $bar)<br>#set($foo =“hello”)<br>#set($foo.name = $bar.name)<br>#set($foo.name = $bar.getName($arg))<br>#set($foo = 123)<br>#set($foo = [“foo”,$bar])<br>二、循环<br>在 Velocity 中循环语句的语法结构如下：<br>#foreach($element in $list)<br>This is $element<br>$velocityCount<br>#end<br>Velocity 引擎会将 list 中的值循环赋给 element 变量，同时会创建一个$velocityCount 的变量作为计数，从 1 开始，每次循环都会加 1.<br>三、条件语句<br>条件语句的语法如下<br>#if(condition)<br>…<br>#elseif(condition)<br>…<br>#else<br>…<br>#end<br>四、关系操作符<br>Velocity 引擎提供了 AND、OR 和 NOT 操作符，分别对应&amp;&amp;、||和! 例如：<br>#if($foo &amp;&amp; $bar)<br>#end<br>五、宏<br>Velocity 中的宏可以理解为函数定义。定义的语法如下：<br>#macro(macroName arg1 arg2 …)<br>…<br>#end<br>调用这个宏的语法是：<br>#macroName(arg1 arg2 …)<br>这里的参数之间使用空格隔开，下面是定义和使用 Velocity 宏的例子：<br>#macro(sayHello $name)<br>hello $name<br>#end<br>#sayHello(“velocity”)<br>输出的结果为 hello velocity<br>六、#parse 和 #include<br>#parse 和 #include 指令的功能都是在外部引用文件，而两者的区别是，#parse 会将引用的内容当成类似于源码文件，会将内容在引入的地方进行解析，#include 是将引入文件当成资源文件，会将引入内容原封不动地以文本输出。分别看以下例子：<br>foo.vm 文件：<br>#set($name =“velocity”)<br>parse.vm：<br>#parse(“foo.vm”)<br>输出结果为：velocity<br>include.vm：<br>#include(“foo.vm”)<br>输出结果为：#set($name =“velocity”)<br>以上内容包含了部分 Velocity 的语法，详细的语法内容可以参考 Velocity 的官方文档。<br>回页首<br>自动生成代码的例子<br>在上个例子中我们可以生成任意的字符串并且打印出来，那为什么我们不能生成一些按照既定格式定义的代码并且写入文件呢。<br>在这里我们以一个实际的 demo 来完成这部分内容。相关内容的源码可以参照附件。这个 demo 的功能是要实现一个学生和老师的管理，实际上都是单张表的维护。我们希望能够只定义 model 层，来生成 MVC 的所有代码。在这个 demo 中，只自动生成 action 和 JSP 的内容，因为现在有很多工具都可以帮助我们自动生成这两个包的代码。<br>首先在 eclipse 中建立一个 Java web 工程，在例子中为了方便管理 jar 包，使用的是 maven 来建立和管理工程。建立好的工程目录结构如下图所示：<br>图 1. 项目目录结构<br>项目目录结构<br>Java Resource 中放的是 Java 源码以及资源文件，Deployed Resources 中放的是 web 相关的文件。在 Java 文件中使用了类似 Spring 的 @Component 和 @Autowired 的注解来实现 IoC，使用 @Action 这样的注解实现 MVC，而在 JSP 中则使用了 JSTL 来输出页面。在上图所示的目录中，annotation、filter、framework 和 util 这四个 package 是作为这个项目框架的，跟业务没有关系，类似于 spring 和 struts 的功能。<br>在实际的项目中我们当然希望能够一开始就编写一个通用的模板文件，然后一下子生成所有的代码，但是很多时候这样做是不可能的，或者说比较困难。为了解决这个问题，我们可以在编写 Velocity 模板文件之前先按照原本的流程编写代码，暂时先忘掉 Velocity。编写的代码应该能够在一个功能上完整的调通涉及 MVC 中所有层次的内容。在这个例子中，先编写好 StudentAction.java 文件，以及上图中 webapp 目录中所示的文件。在写好以上代码，同时也能顺利运行之后，我们可以参照之前编写的代码来写模板文件。这里我们来分别看一个 Java 文件和 JSP 的例子。<br>清单 3. ActionTemplate.vm<br>#parse (“macro.vm”)</li>
</ol>
<p>@Action(“${classNameLowCase}Action”)<br>public class ${classNameUpCase}Action extends BaseAction{<br> @Autowired<br> public ${classNameUpCase}Dao ${classNameLowCase}Dao;<br> private List&lt;${classNameUpCase}&gt; ${classNameLowCase}s;<br> private ${classNameUpCase} ${classNameLowCase};</p>
<p>#foreach ($attr in ${attrs})<br> private ${attr[0]} ${attr[1]};</p>
<p>#end<br> public String ${classNameLowCase}List() {<br> ${classNameLowCase}s = ${classNameLowCase}Dao.retrieveAll${classNameUpCase}s();<br> return “${classNameLowCase}List.jsp”;<br> }</p>
<p> …<br>}<br>上面的代码展示了一个 Java 类转换成 vm 模板之后的部分内容，完整内容请参考附件。<br>macro.vm 文件中定义了一些使用的宏。JSP 的改造相对于 Java 文件来说稍微有点复杂，因为 JSP 中使用 JSTL 取 request 中的值也是使用${name} 这样的语法，所以想要输出${name} 这样的字符串而不是被模板引擎所替换，则需要使用转义字符，就像这样：\${name}。<br>为了能够让这个文件中的 table 得到复用，我们将这个文件中的表格单独拿出来，使用 #parse 命令来包含。下面是 ListJspTemplate.vm 和 ListTableTemplate.vm 的内容：<br>清单 4. ListJspTemplate.vm<br>&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8”<br> pageEncoding=”UTF-8”%&gt;<br>&lt;%@taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="external">http://java.sun.com/jsp/jstl/core</a>“ %&gt;<br>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “<a href="http://www.w3.org/TR/html4/loose.dtd&quot;&gt;" target="_blank" rel="external">http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</a></p>
<p><html></html></p>
<p><head><br> &lt;%@ include file=”includeJS.jsp” %&gt;<br> <script type="text/javascript"><br> var pageConfig = {<br> “list” : {<br> “action” : “${classNameLowCase}Action!${classNameLowCase}List.action”<br> }<br> …<br> “idName” : “${classNameLowCase}Id”<br> };<br> </script><br> <script type="text/javascript" src="common.js"></script></head></p>
<p><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></p>
<p><title>${classNameUpCase} List</title><br></p>
<p><body></body></p>
<p></p><h1>${classNameUpCase} List</h1><p></p>
<p><div><button id="addButton">Add</button></div></p>
<p>#parse (“ListTableTemplate.vm”)</p>
<p><div id="modifyDiv"></div></p>
<p><div id="addDiv"></div><br><br><br>清单 5. ListTableTemplate.vm</p>
<p>#parse (“macro.vm”)</p>
<p>#set($plus = “status.index+1”)</p>
<p><table border="1" style="width: 100%"><br> <thead><br> <tr><th>No.</th>#generateTH($attrs)</tr><br> </thead><br> <tbody><br> <c:foreach var="${classNameLowCase}" items="${${classNameLowCase}s }" varstatus="status"><br> <tr ${classnamelowcase}id="${${classNameLowCase}.id }"><br> <td>${${plus}}</td>#generateTD($classNameLowCase $attrs)<td><br> <button class="modifyButton">Modify</button><br> <button class="deleteButton">Delete</button></td></tr><br> </c:foreach><br> </tbody><br></table><br>在定义好所有的模板文件之后，需要做的是读取这些文件，然后根据这些文件将 model 的数据类型以及名称设置到 context 中，最后将解析出来的内容写到相应的目录中去。这些工作我们放在了一个叫做 VelocityGenerator 的类中来做，它的源码如下：<br>清单 6. TemplateGenerator.java<br>public class VelocityGenerator {</p>
<p> public static void main(String[] args) {<br> VelocityEngine ve = new VelocityEngine();<br> ve.setProperty(RuntimeConstants.RESOURCE_LOADER, “classpath”);<br> ve.setProperty(“classpath.resource.loader.class”, ClasspathResourceLoader.class.getName());</p>
<p> ve.init();<br> Template actionTpt = ve.getTemplate(“ActionTemplate.vm”);<br> Template listJspTpt = ve.getTemplate(“ListJspTemplate.vm”);<br> Template addTpt = ve.getTemplate(“AddTemplate.vm”);<br> Template modifyTpt = ve.getTemplate(“ModifyTemplate.vm”);<br> VelocityContext ctx = new VelocityContext();</p>
<p> ctx.put(“classNameLowCase”, “teacher”);<br> ctx.put(“classNameUpCase”, “Teacher”);<br> String[][] attrs = {<br> {“Integer”,”id”},<br> {“String”,”name”},<br> {“String”,”serializeNo”},<br> {“String”,”titile”},<br> {“String”,”subject”}<br> };<br> ctx.put(“attrs”, attrs);<br> String rootPath = VelocityGenerator.class.getClassLoader().getResource(“”).getFile() + “../../src/main”;<br> merge(actionTpt,ctx,rootPath+”/java/com/liuxiang/velocity/action/TeacherAction.java”);<br> merge(listJspTpt,ctx,rootPath+”/webapp/teacherList.jsp”);<br> merge(addTpt,ctx,rootPath+”/webapp/teacherAdd.jsp”);<br> merge(modifyTpt,ctx,rootPath+”/webapp/teacherModify.jsp”);<br> System.out.println(“success…”);<br> }</p>
<p> private static void merge(Template template, VelocityContext ctx, String path) {<br> PrintWriter writer = null;<br> try {<br> writer = new PrintWriter(path);<br> template.merge(ctx, writer);<br> writer.flush();<br> } catch (FileNotFoundException e) {<br> e.printStackTrace();<br> } finally {<br> writer.close();<br> }<br> }<br>}<br>在运行以上代码之后，项目文件夹中将会出现与 Teacher 相关的代码文件。<br>在实际项目中可能不会出现很多这种单张表维护的情况，而且业务逻辑和系统架构会更加复杂，编写模板文件就更加不容易。但是无论多复杂的系统，不同的业务逻辑之间一定或多或少会有相似的代码，特别是在 JSP 和 JS 显示端文件中，因为我们在一个系统中要求显示风格、操作方式一致的时候就免不了会有相似内容的代码出现。在总结这些相似性之后我们还是可以使用 Velocity 来帮助我们生成部分内容的代码，而且即使有一些非共性的内容，我们也可以在生成的代码中继续修改。使用 Velocity 的另外一个好处是生成出来的代码更好维护，风格更加统一。<br>回页首<br>结束语<br>Velocity 可以被应用在各种各样的情景下，本文介绍的只是它的一种用途而已，它还可以被用来做 MVC 结构中的 view 层，或者动态内容静态化等。另外，Velocity 并不是唯一的模板框架，同样很优秀的 Freemarker 也获得了非常广泛的应用，有兴趣的读者可以去深入研究更多的功能和用途。</p>
]]></content>
    
    <summary type="html">
    
      使用 Velocity 模板引擎快速生成代码
    
    </summary>
    
      <category term="Velocity" scheme="http://jishusuishouji.github.io/categories/Velocity/"/>
    
    
      <category term="Velocity" scheme="http://jishusuishouji.github.io/tags/Velocity/"/>
    
  </entry>
  
  <entry>
    <title>Spring中提示元素 &#39;ref&#39; 中不允许出现属性 &#39;local&#39;</title>
    <link href="http://jishusuishouji.github.io/2017/01/17/spring/Spring%E4%B8%AD%E6%8F%90%E7%A4%BA%E5%85%83%E7%B4%A0__ref__%E4%B8%AD%E4%B8%8D%E5%85%81%E8%AE%B8%E5%87%BA%E7%8E%B0%E5%B1%9E%E6%80%A7__local_/"/>
    <id>http://jishusuishouji.github.io/2017/01/17/spring/Spring中提示元素__ref__中不允许出现属性__local_/</id>
    <published>2017-01-17T07:58:44.000Z</published>
    <updated>2017-01-17T08:00:23.520Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题在Spring4.X以前的版本不存在。通过查询Spring的官方文档Spring4.X的以上版本不支持该属性了。<br>下面是官方说明：</p>
<blockquote>
<p>The local attribute on the ref element is no longer supported in the 4.0 beans xsd since it does not provide value over a regular bean reference anymore. Simply change your existing ref local references to ref bean when upgrading to the 4.0 schema. </p>
</blockquote>
<p>官方建议使用bean在Spring4.0以上的版本。</p>
<h2 id="案例重现"><a href="#案例重现" class="headerlink" title="案例重现"></a>案例重现</h2><h3 id="抛错："><a href="#抛错：" class="headerlink" title="抛错："></a>抛错：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 37 in XML document from class path resource [application_dependencies.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 37; columnNumber: 27; cvc-complex-type.3.2.2: 元素 &apos;ref&apos; 中不允许出现属性 &apos;local&apos;。</div><div class="line">    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)</div><div class="line">    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)</div><div class="line">    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)</div><div class="line">    at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)</div><div class="line">    at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217)</div><div class="line">    at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:188)</div><div class="line">    at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:252)</div><div class="line">    at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127)</div><div class="line">    at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93)</div><div class="line">    at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)</div><div class="line">    at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:604)</div><div class="line">    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509)</div><div class="line">    at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139)</div><div class="line">    at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:83)</div><div class="line">    at com.mxsm.spring.SpringDependencies.main(SpringDependencies.java:64)</div><div class="line">Caused by: org.xml.sax.SAXParseException; lineNumber: 37; columnNumber: 27; cvc-complex-type.3.2.2: 元素 &apos;ref&apos; 中不允许出现属性 &apos;local&apos;。</div><div class="line">    at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:198)</div><div class="line">    at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:134)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:437)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:368)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:325)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:453)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3232)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processAttributes(XMLSchemaValidator.java:2709)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:2051)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.emptyElement(XMLSchemaValidator.java:761)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:353)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2717)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:607)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:116)</div><div class="line">    at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:489)</div><div class="line">    at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:835)</div><div class="line">    at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764)</div><div class="line">    at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:123)</div><div class="line">    at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:237)</div><div class="line">    at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:300)</div><div class="line">    at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)</div><div class="line">    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)</div><div class="line">    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)</div><div class="line">    ... 14 more</div></pre></td></tr></table></figure>
<h3 id="spring-xml文件配置"><a href="#spring-xml文件配置" class="headerlink" title="spring xml文件配置"></a>spring xml文件配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</div><div class="line"></div><div class="line">    &lt;bean id=&quot;animals&quot; class=&quot;com.mxsm.spring.bean.Animal&quot;&gt;</div><div class="line">        &lt;constructor-arg&gt;</div><div class="line">            &lt;ref bean=&quot;dog&quot;/&gt;</div><div class="line">        &lt;/constructor-arg&gt;</div><div class="line">        &lt;constructor-arg&gt;</div><div class="line">            &lt;ref bean=&quot;cat&quot;/&gt;</div><div class="line">        &lt;/constructor-arg&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;!--使用type属性--&gt;</div><div class="line">    &lt;bean id=&quot;dog&quot; class=&quot;com.mxsm.spring.bean.Dog&quot;&gt;</div><div class="line">        &lt;constructor-arg  type=&quot;java.lang.String&quot; value=&quot;aa&quot;/&gt;</div><div class="line">        &lt;constructor-arg  type=&quot;int&quot; value=&quot;1&quot;/&gt;</div><div class="line">        &lt;constructor-arg  type=&quot;java.lang.String&quot; value=&quot;meat&quot;/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id=&quot;dog_2&quot; class=&quot;com.mxsm.spring.bean.Dog&quot;&gt;</div><div class="line">        &lt;constructor-arg index=&quot;0&quot; value=&quot;ssss&quot;/&gt;</div><div class="line">        &lt;constructor-arg index=&quot;1&quot; value=&quot;3333&quot;/&gt;</div><div class="line">        &lt;constructor-arg index=&quot;2&quot; value=&quot;8888&quot;/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id=&quot;cat&quot; class=&quot;com.mxsm.spring.bean.Cat&quot;&gt;</div><div class="line">        &lt;constructor-arg name=&quot;a&quot; value=&quot;ssss&quot;/&gt;</div><div class="line">        &lt;constructor-arg name=&quot;b&quot; value=&quot;3333&quot;/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;!-- setter 依赖注入bean --&gt;</div><div class="line">    **&lt;bean id=&quot;man&quot; class=&quot;com.mxsm.spring.bean.Man&quot;&gt;</div><div class="line">        &lt;property name=&quot;white&quot;&gt;</div><div class="line">            &lt;ref local=&quot;whiteMan&quot;/&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line"></div><div class="line">        &lt;property name=&quot;yellow&quot;&gt;</div><div class="line">            &lt;ref local =&quot;yellowMan&quot;/&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line"></div><div class="line">        &lt;property name=&quot;id&quot; value=&quot;1&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;/bean&gt;**</div><div class="line"></div><div class="line">    &lt;bean id=&quot;whiteMan&quot; class=&quot;com.mxsm.spring.bean.WhitePerson&quot;&gt;</div><div class="line">        &lt;constructor-arg name=&quot;age&quot; value=&quot;1&quot;/&gt;</div><div class="line">        &lt;constructor-arg name=&quot;color&quot; value=&quot;white&quot;/&gt;</div><div class="line">        &lt;constructor-arg name=&quot;name&quot; value=&quot;USA&quot;/&gt;</div><div class="line">        &lt;constructor-arg name=&quot;sex&quot; value=&quot;男&quot;/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id=&quot;yellowMan&quot; class=&quot;com.mxsm.spring.bean.YellowPerson&quot;&gt;</div><div class="line">        &lt;constructor-arg name=&quot;age&quot; value=&quot;1&quot;/&gt;</div><div class="line">        &lt;constructor-arg name=&quot;color&quot; value=&quot;yellow&quot;/&gt;</div><div class="line">        &lt;constructor-arg name=&quot;name&quot; value=&quot;China&quot;/&gt;</div><div class="line">        &lt;constructor-arg name=&quot;sex&quot; value=&quot;男&quot;/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Spring中提示元素 &#39;ref&#39; 中不允许出现属性 &#39;local&#39;
    
    </summary>
    
      <category term="spring" scheme="http://jishusuishouji.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="http://jishusuishouji.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>nodejs的require模块及路径</title>
    <link href="http://jishusuishouji.github.io/2017/01/14/nodejs/nodejs%E7%9A%84require%E6%A8%A1%E5%9D%97%E5%8F%8A%E8%B7%AF%E5%BE%84/"/>
    <id>http://jishusuishouji.github.io/2017/01/14/nodejs/nodejs的require模块及路径/</id>
    <published>2017-01-13T17:30:53.000Z</published>
    <updated>2017-01-13T17:38:42.287Z</updated>
    
    <content type="html"><![CDATA[<p>在nodejs中，模块分为核心模块和文件模块。    </p>
<p>核心模块是被编译成二进制代码，引用的时候只需<code>require</code>即可，如<code>require(&#39;net&#39;)</code>。<br>文件模块，则是指js文件、json文件或者是.node文件。在引用文件模块的时候要加上文件的路径：如果既不加<code>/.../...</code>、<code>../</code>又不加<code>./</code>的话，则该模块要么是核心模块，要么是从一个<code>node_modules</code>文件夹加载。</p>
<p>如果’<code>/home/ry/projects/foo.js</code>‘ 中的文件调用了`require(‘bar.js’)`` ，node将在下面的位置进行搜索：</p>
<p>•<code>/home/ry/projects/node_modules/bar.js</code><br>•<code>/home/ry/node_modules/bar.js</code><br>•<code>/home/node_modules/bar.js</code><br>•<code>/node_modules/bar.js</code></p>
<h2 id="文件夹作为模块："><a href="#文件夹作为模块：" class="headerlink" title="文件夹作为模块："></a>文件夹作为模块：</h2><p>首先在<code>./some-library</code>文件夹下建立<code>package.json</code>文件，它标识了一个主模块。一个<code>package.json</code>中的内容可能如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    &quot;name&quot; : &quot;some-library&quot;,  </div><div class="line">    &quot;main&quot; : &quot;./lib/some-library.js&quot; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>require(&#39;./some-library&#39;)</code>(和some-library相同路径的js文件)时将试图加载<code>./some-library/lib/some-library.js</code><br>如果在这个目录下没有<code>package.json</code>文件，node将试图从这个目录下加载<code>index.js</code>或<code>index.node</code>文件。例如，如果上面没有<code>package.json</code>文件，那么<code>require(&#39;./some-library&#39;)</code>时，将试图加载下面的文件：<br>•<code>./some-library/index.js</code><br>•<code>./some-library/index.node</code></p>
<p>分类: javascript,nodejs<br>标签: javascript, nodejs</p>
]]></content>
    
    <summary type="html">
    
      nodejs的require模块及路径
    
    </summary>
    
      <category term="nodejs" scheme="http://jishusuishouji.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://jishusuishouji.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC事务配置</title>
    <link href="http://jishusuishouji.github.io/2017/01/09/java/spring/Spring_MVC%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
    <id>http://jishusuishouji.github.io/2017/01/09/java/spring/Spring_MVC事务配置/</id>
    <published>2017-01-09T14:36:01.000Z</published>
    <updated>2017-01-09T14:36:01.677Z</updated>
    
    <summary type="html">
    
      Spring MVC事务配置
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>是该抛弃Spring HibernateTemplate的时候了</title>
    <link href="http://jishusuishouji.github.io/2017/01/09/java/spring/%E6%98%AF%E8%AF%A5%E6%8A%9B%E5%BC%83Spring_HibernateTemplate%E7%9A%84%E6%97%B6%E5%80%99%E4%BA%86/"/>
    <id>http://jishusuishouji.github.io/2017/01/09/java/spring/是该抛弃Spring_HibernateTemplate的时候了/</id>
    <published>2017-01-09T14:26:48.000Z</published>
    <updated>2017-01-09T14:34:52.368Z</updated>
    
    <content type="html"><![CDATA[<p>在spring2.0之前，我们在使用hibernate和spring的时候，都会被<code>HibernateTemplate</code>为我们提供benefits（资源和事务管理以及把那个“丑陋”的checked exception转换为runtime exception-DataAccessException ）而折服，在项目中不由自主、不假思索地使用它和那个经典的callback方法。而如今，hibernate3.0.1+ 、spring 2.0+版本以后，我们可以在数据访问层直接使用hinberate的session API(例如<code>SessionFactory.getCurrentSession</code>)，不并担心session和transaction management。至于error handling可以通过spring的@Repository annotation和post processor-PersistenceExceptionTranslationPostProcessor来解决。让我们来看一些代码片段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate3.  </div><div class="line">LocalSessionFactoryBean&quot;&gt;  </div><div class="line">&lt;!-- the properties setting--&gt;  </div><div class="line">&lt;/bean&gt;  </div><div class="line">   </div><div class="line">&lt;bean id=&quot;accountRepo&quot; class=&quot;com.mycompany.HibernateAccountRepository&quot;&gt;  </div><div class="line">    &lt;constructor-arg ref=&quot;sessionFactory&quot;&gt;&lt;/constructor-arg&gt;  </div><div class="line">&lt;/bean&gt;  </div><div class="line">&lt;bean class=&quot;org.springframework.dao.annotation. PersistenceExceptionTranslationPostProcessor&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>数据访问层代码片段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Repository  </div><div class="line">public class HibernateAccountRepository implements AccountRepository &#123;  </div><div class="line">   </div><div class="line">    private SessionFactory factory;  </div><div class="line">   </div><div class="line">    public HibernateAccountRepository(SessionFactory factory) &#123;  </div><div class="line">        this.factory = factory;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public Account loadAccount(String username) &#123;  </div><div class="line">        return (Account)factory.getCurrentSession()</div><div class="line">                  .createQuery(&quot;from Account acc where acc.name = :name&quot;)  </div><div class="line">                  .setParameter(&quot;name&quot;, &quot;thethirdpart&quot;).uniqueResult();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在xml配置文件里面通过配置的post processor会自动检测<code>@Repository</code>标注的bean并为该bean打开exception转换功能。    </p>
<p>如果不支持annotations，可以通过AOP来实现，更方便<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;persistenceExceptionInterceptor&quot;  </div><div class="line">class=&quot;org.springframework.dao.support.PersistenceExceptionTranslationInterceptor&quot;/&gt;  </div><div class="line">&lt;aop:config&gt;  </div><div class="line">    &lt;aop:advisor pointcut=&quot;execution(* *..*Repository+.*(..))&quot;  </div><div class="line">                          advice-ref=&quot;persistenceExceptionInterceptor&quot; /&gt;  </div><div class="line">&lt;/aop:config&gt;</div></pre></td></tr></table></figure></p>
<p>总结，我们应该选择哪种方式呢？还是那句话，根据不同的情况来做最正确的选择。但我建议是丢弃template，而直接使用hibernate的API，毕竟灵活性更大，更何况遇到复杂的情况我们始终得面对hibernate的API。spring并不强制你做任何事情，记得它是一个非侵入性的framework。</p>
]]></content>
    
    <summary type="html">
    
      是该抛弃Spring HibernateTemplate的时候了
    
    </summary>
    
      <category term="java" scheme="http://jishusuishouji.github.io/categories/java/"/>
    
    
      <category term="spring" scheme="http://jishusuishouji.github.io/tags/spring/"/>
    
      <category term="java" scheme="http://jishusuishouji.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>So should you still use Spring&#39;s HibernateTemplate and/or JpaTemplate??</title>
    <link href="http://jishusuishouji.github.io/2017/01/09/java/spring/So_should_you_still_use_Spring_s_HibernateTemplate_and_or_JpaTemplate__/"/>
    <id>http://jishusuishouji.github.io/2017/01/09/java/spring/So_should_you_still_use_Spring_s_HibernateTemplate_and_or_JpaTemplate__/</id>
    <published>2017-01-09T14:20:51.000Z</published>
    <updated>2017-01-09T14:46:04.037Z</updated>
    
    <content type="html"><![CDATA[<p>I was reading <a href="http://www.infoq.com/articles/dynamic-routing-using-spring" target="_blank" rel="external">an article by Vigil Bose</a> on TSS the other day and saw the usage of the <code>HibernateDaoSupport</code> class. Since this is no longer a recommended way of using Hibernate from Spring, I thought I might as well just blog about it another time.   </p>
<p>不建议使用<code>HibernateDaoSupport</code>。   </p>
<p>With the advent(n. 到来；出现；) of Spring 2.0, it has become possible to start using the Hibernate Session API directly again. The question is whether or not it is wise to abandon the use of the <code>HibernateTemplate</code> when working with Hibernate, or any other template-based approaches Spring features.  </p>
<h2 id="Using-Spring-XxxTemplates"><a href="#Using-Spring-XxxTemplates" class="headerlink" title="Using Spring XxxTemplates"></a>Using Spring XxxTemplates</h2><p>In Spring 1.0, we introduced a revolutionary way of working with data access APIs that threw checked exceptions. The template approach Spring features along with its transaction synchronization manager and the extensive(adj. 广泛的；大量的；广阔的) use of runtime exceptions makes any TCFTC (short for try/catch-finally-try/catch as we coined(杜撰) it back in 2005) often found in data access code entirely obsolete. Below you can see (a simplified version and not entirely precise version of) what Spring’s template approach does for you (with specific code snippets that you would otherwise have to write).</p>
<p><strong>Acquisition of connection</strong>: If transaction synchronization is active (which it is, if you’re using Spring’s transaction management infrastructure), most of the times any of the Spring templates are using the same connection across the entire thread (things are actually a bit more complicated than that, but that would lead us too much into the gory details).   </p>
<p><strong>Participation in a transaction</strong> Again, when using transaction management features, Spring will automatically associated any new connection with the current transaction. This again, all depends on the current propagations settings and so on, but whichever way you look at it, your core code is not affected by it.</p>
<p><strong>Specification of the SQL</strong>: This is what you (obviously) have to do yourself. The SQL ideally uses bind parameters, to avoid any chances of SQL injection from happening. Parameters are passed to the JDBC template as arguments.</p>
<p><strong>Creation / execution of statement and iterating over result set</strong>: After you’ve specified the SQL, Spring is going to create the statement for you, set any parameters you may have specified, execute it and loop over the result set for you.</p>
<p><strong>Parse result from result set</strong>: You can opt for parsing the result set yourself if you like (or if you have complex parsing requirements), or you can have Spring result a list of primitives, or just one value from the result set.</p>
<p><strong>Handling and translation of exceptions</strong>: This is where Spring translates any exceptions that might have occurred to Spring’s own DataAccessException hierarchy, automatically insulating calling code from the data access technology in use.</p>
<p><strong>Releasing of connection</strong>: This is the last piece of the puzzle where Spring releases any resources used. Of course, if transaction synchronization is active, the resources might not be released immediately.</p>
<p>Templates are available for several APIs such as:</p>
<ul>
<li>JDBC (JdbcTemplate)</li>
<li>Hibernate (HibernateTemplate)</li>
<li>iBatis (SqlMapClientTemplate)</li>
<li>JDO (JdoTemplate)</li>
<li>TopLink (TopLinkTemplate)</li>
<li>Messaging (JmsTempate)</li>
<li>Transaction management (TransactionTemplate)</li>
<li>JNDI (JndiTemplate)</li>
</ul>
<h2 id="Are-templates-really-necessary"><a href="#Are-templates-really-necessary" class="headerlink" title="Are templates really necessary?"></a>Are templates really necessary?</h2><p>The templates add a lot of value when using an API that uses checked exceptions (as opposed to runtime exceptions or unchecked exceptions), but also add a lot of consistency to your code base. People having learnt Spring’s <code>JdbcTemplate</code> can pretty easily start using Spring’s <code>JdoTemplate</code> or Spring’s <code>HibernateTemplate</code>–the approach to using those is similar for each one of them.</p>
<p>The most visible impact of the Spring template approach is the code reduction for for example JDBC. This is primarily because the checked exceptions are translated to runtime exceptions inside the template, removing the need to catch the exception in your mainline code. Other reasons are the transparent resource management and automatic synchronization with the currently running transaction. Of course it’s fairly easy to change a framework to use runtime exceptions natively instead of Spring having to do this and this is what for example Hibernate has started to do from version 3.0 onwards. Hibernate is not the only technology to do this–the Java Persistence API is also using runtime exceptions.</p>
]]></content>
    
    <summary type="html">
    
      So should you still use Spring&#39;s HibernateTemplate and/or JpaTemplate??
    
    </summary>
    
      <category term="java" scheme="http://jishusuishouji.github.io/categories/java/"/>
    
      <category term="spring" scheme="http://jishusuishouji.github.io/categories/java/spring/"/>
    
    
      <category term="spring" scheme="http://jishusuishouji.github.io/tags/spring/"/>
    
      <category term="java" scheme="http://jishusuishouji.github.io/tags/java/"/>
    
      <category term="hibernate" scheme="http://jishusuishouji.github.io/tags/hibernate/"/>
    
      <category term="HibernateTemplate" scheme="http://jishusuishouji.github.io/tags/HibernateTemplate/"/>
    
  </entry>
  
  <entry>
    <title>java分布式事务(JTA)实现 jotm和atomikos</title>
    <link href="http://jishusuishouji.github.io/2017/01/08/java/jta/java%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1_JTA_%E5%AE%9E%E7%8E%B0%20jotm%E5%92%8Catomikos/"/>
    <id>http://jishusuishouji.github.io/2017/01/08/java/jta/java分布式事务_JTA_实现 jotm和atomikos/</id>
    <published>2017-01-08T02:03:52.000Z</published>
    <updated>2017-01-08T08:17:24.019Z</updated>
    
    <content type="html"><![CDATA[<p>本地事务：只对单一数据源(单个数据库)事务进行控制。<br>分布式事务：处理多种异构的数据源， 比如某个业务操作中同时包含JDBC和JMS或者某个操作需要访问多个不同的数据库，在不同数据库之间进行事务控制。</p>
<p>在Java中，分布式事务主要的规范是JTA/XA。其中：JTA是Java的事务管理器规范，XA是工业标准的X/Open CAE规范，可被两阶段提交及回滚的事务资源定义。比如某数据库实现了XA规范，则不管是JTA，还是MSDTC，都可以基于同样的行为对该数据库进行事务处理。</p>
<p>JTA全称为Java Transaction API，顾名思义JTA定义了一组统一的事务编程的接口，这些接口如下：</p>
<p><code>XAResource</code>：XAResource接口是对实现了X/Open CAE规范的资源管理器 (Resource Manager，数据库就是典型的资源管理器) 的抽象，它由资源适配器 (Resource Apdater) 提供实现。<code>XAResource</code>是支持事务控制的核心。<br><code>Transaction</code>：<code>Transaction</code>接口是一个事务实例的抽象，通过它可以控制事务内多个资源的提交或者回滚。二阶段提交过程也是由<code>Transaction</code>接口的实现者来完成的。<br><code>TransactionManager</code>：托管模式 (managed mode)   下，<code>TransactionManager</code>接口是被应用服务器调用，以控制事务的边界的。<br><code>UserTransaction</code>：非托管模式 (non-managed mode) 下，应用程序可以通过<code>UserTransaction</code>接口控制事务的边界</p>
<p>在tomcat下是没有分布式事务的，可以借助于第三方Jotm和Automikos实现，在spring中分布式事务是通过jta（jotm，atomikos）来进行实现。即：通过代码的方式来决定是否是分布式事务。</p>
<p>注：推荐用服务器自己的数据源(也就是 lookup JNDI)，这样的话，是不是XA事务就由服务器的配置来定制，代码就不需要任何配置来决定是不是XA了。<br>事务本身是不是XA (分布式的）是服务器的事，服务器来管理“资源” （包括数据源，JMS 连接等，一个资源（JDBC连接）如何参与事务是“资源管理器”（驱动程序）的职责，跟程序无关），服务器提供事务管理并作为“事务协调者”来处理多个“资源管理器”（不同的数据库连接）之间的事务一致性。</p>
<p>jotm和automikos网址：<br>1、<a href="http://jotm.objectweb.org/" target="_blank" rel="external">http://jotm.objectweb.org/</a><br>2、<a href="http://www.atomikos.com/Main/TransactionsEssentials" target="_blank" rel="external">http://www.atomikos.com/Main/TransactionsEssentials</a> </p>
<p>Spring 通过AOP技术可以让我们在脱离EJB的情况下享受声明式事务的丰盛大餐。此外，通过配合使用ObjectWeb的JOTM开源项目，不需要Java EE应用服务器，Spring也可以提供JTA事务。 </p>
<p>正因为AOP让Spring拥有了脱离EJB容器的声明式事务能力，而JOTM让我们在脱离Java EE应用服务器下拥有JTA事务能力。所以，人们将AOP和JOTM称为Java软件开发的两个圣杯。    </p>
<p>JTA的实现框架有：<br>GeronimoTM/Jencks  官方文档比较少，不适合学习和维护。<br>SimpleJTA 没有实现JTS (Java Transaction Service)而且不是活跃的。<br>Atomikos  是一个另人钦佩的产品。有丰富的文档，而且有很好的支持。<br>JBossTS  是一个应用在JBOSS服务器上的，肯定是一个成熟的产品，也有好的支持，详细信息可以看这里：<a href="http://www.theserverside.com/news/thread.tss?thread_id=37941" target="_blank" rel="external">http://www.theserverside.com/news/thread.tss?thread_id=37941</a><br>最常见的二个如下：<br>JOTM<br>    JOTM(Java Open Transaction Manager)是ObjectWeb的一个开源JTA实现，它本身也是开源应用程序服务器JOnAS(Java Open Application Server)的一部分，为其提供JTA分布式事务的功能。<br>    存在的问题：使用中不能自动rollback，无论什么情况都commit。注：spring3开始已经不再支持jotm</p>
<p>Atomikos<br>    大家推荐最多的。和JOTM相比Atomikos Transactions Essentials更加稳定，它原来是商业项目，现在开源了。象MySQL一样卖服务支持的。而且论坛页比较活跃，有问题很快可以解决。 </p>
]]></content>
    
    <summary type="html">
    
      java分布式事务(JTA)实现 jotm和atomikos
    
    </summary>
    
      <category term="java" scheme="http://jishusuishouji.github.io/categories/java/"/>
    
      <category term="jta" scheme="http://jishusuishouji.github.io/categories/java/jta/"/>
    
    
      <category term="java" scheme="http://jishusuishouji.github.io/tags/java/"/>
    
      <category term="jta" scheme="http://jishusuishouji.github.io/tags/jta/"/>
    
      <category term="分布式事务" scheme="http://jishusuishouji.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="jotm" scheme="http://jishusuishouji.github.io/tags/jotm/"/>
    
      <category term="atomikos" scheme="http://jishusuishouji.github.io/tags/atomikos/"/>
    
  </entry>
  
  <entry>
    <title>java分布式事务:spring+JTA+jotm</title>
    <link href="http://jishusuishouji.github.io/2017/01/08/java/jta/java%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1_spring_JTA_jotm/"/>
    <id>http://jishusuishouji.github.io/2017/01/08/java/jta/java分布式事务_spring_JTA_jotm/</id>
    <published>2017-01-08T01:23:24.000Z</published>
    <updated>2017-01-08T08:18:52.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><p>当新建用户时需插入一条用户记录，同时还需在另一个DB中记录日志。因为是不同的DB操作，所以及到分布式事务的处理。</p>
<h3 id="1、代码结构："><a href="#1、代码结构：" class="headerlink" title="1、代码结构："></a>1、代码结构：</h3><p><img src="http://img.blog.csdn.net/20150209142444553?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl1eGlhbzcyMzg0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="项目在eclipse中"></p>
<h3 id="2、建表语句："><a href="#2、建表语句：" class="headerlink" title="2、建表语句："></a>2、建表语句：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">create database log;  </div><div class="line">DROP TABLE IF EXISTS `log`;  </div><div class="line">CREATE TABLE `log` (  </div><div class="line">  `id` varchar(20) NOT NULL,  </div><div class="line">  `content` varchar(100) default NULL,  </div><div class="line">  PRIMARY KEY  (`id`)  </div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">create database user;  </div><div class="line">DROP TABLE IF EXISTS `user`;  </div><div class="line">CREATE TABLE `user` (  </div><div class="line">  `id` varchar(20) NOT NULL,  </div><div class="line">  `name` varchar(40) default NULL,  </div><div class="line">  PRIMARY KEY  (`id`)  </div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="3、配置文件application-xml"><a href="#3、配置文件application-xml" class="headerlink" title="3、配置文件application.xml"></a>3、配置文件<code>application.xml</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">&lt;!--?xml version=1.0 encoding=UTF-8?--&gt;  </div><div class="line">&lt;beans aop=&quot;&quot; beans=&quot;&quot; http:=&quot;&quot; schema=&quot;&quot; spring-aop.xsd=&quot;&quot; spring-beans.xsd=&quot;&quot; spring-tx.xsd=&quot;&quot; tx=&quot;&quot; www.springframework.org=&quot;&quot; xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemalocation=&quot;http://www.springframework.org/schema/beans&quot;&gt;  </div><div class="line">       </div><div class="line">    &lt;!-- 引用Spring内部所提供的对JOTM支持的工厂类 --&gt;  </div><div class="line">    &lt;bean class=&quot;org.springframework.transaction.jta.JotmFactoryBean&quot; id=&quot;jotm&quot;/&gt;  </div><div class="line">       </div><div class="line">    &lt;!-- 配置JTA事务管理器, 并在管理器中使用上面所配置的JOTM --&gt;  </div><div class="line">    &lt;bean class=&quot;org.springframework.transaction.jta.JtaTransactionManager&quot; id=&quot;txManager&quot;&gt;  </div><div class="line">        &lt;property name=&quot;userTransaction&quot; ref=&quot;jotm&quot;/&gt;</div><div class="line">    &lt;/bean&gt;  </div><div class="line">       </div><div class="line">    &lt;!-- 配置多个数据源 --&gt;  </div><div class="line">    &lt;bean class=&quot;org.enhydra.jdbc.pool.StandardXAPoolDataSource&quot; destroy-method=&quot;shutdown&quot; id=&quot;db1&quot;&gt;  </div><div class="line">        &lt;property name=&quot;dataSource&quot;&gt;  </div><div class="line">            &lt;bean class=&quot;org.enhydra.jdbc.standard.StandardXADataSource&quot; destroy-method=&quot;shutdown&quot;&gt;  </div><div class="line">                &lt;property name=&quot;transactionManager&quot; ref=&quot;jotm&quot;/&gt;  </div><div class="line">                &lt;property name=&quot;driverName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;  </div><div class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:MySQL://localhost:3306/user&quot;/&gt;  </div><div class="line">            &lt;/bean&gt;  </div><div class="line">        &lt;/property&gt;  </div><div class="line">        &lt;property name=&quot;user&quot; value=&quot;root&quot;/&gt;  </div><div class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;  </div><div class="line">    &lt;/bean&gt;  </div><div class="line">   </div><div class="line">    &lt;bean class=&quot;org.enhydra.jdbc.pool.StandardXAPoolDataSource&quot; destroy-method=&quot;shutdown&quot; id=&quot;db2&quot;&gt;  </div><div class="line">        &lt;property name=&quot;dataSource&quot;&gt;  </div><div class="line">            &lt;bean class=&quot;org.enhydra.jdbc.standard.StandardXADataSource&quot; destroy-method=&quot;shutdown&quot;&gt;  </div><div class="line">                &lt;property name=&quot;transactionManager&quot; ref=&quot;jotm&quot;/&gt;  </div><div class="line">                &lt;property name=&quot;driverName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;  </div><div class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:MySQL://localhost:3306/log&quot;/&gt;  </div><div class="line">            &lt;/bean&gt;  </div><div class="line">        &lt;/property&gt;  </div><div class="line">        &lt;property name=&quot;user&quot; value=&quot;root&quot;/&gt;  </div><div class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;  </div><div class="line">    &lt;/bean&gt;  </div><div class="line">       </div><div class="line">    &lt;!-- 根据不同的数据源配置两个jdbcTemplate --&gt;  </div><div class="line">    &lt;bean class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot; id=&quot;jdbcTemplate1&quot;&gt;  </div><div class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;db1&quot;/&gt;  </div><div class="line">    &lt;/bean&gt;  </div><div class="line">   </div><div class="line">    &lt;bean class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot; id=&quot;jdbcTemplate2&quot;&gt;  </div><div class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;db2&quot;/&gt;  </div><div class="line">    &lt;/bean&gt;  </div><div class="line">   </div><div class="line">    &lt;bean class=&quot;com.zdp.dao.UserDao&quot; id=&quot;userDao&quot;&gt;  </div><div class="line">        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate1&quot;/&gt;  </div><div class="line">    &lt;/bean&gt;  </div><div class="line">   </div><div class="line">    &lt;bean class=&quot;com.zdp.dao.LogDao&quot; id=&quot;logDao&quot;&gt;  </div><div class="line">        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate2&quot;/&gt;  </div><div class="line">    &lt;/bean&gt;  </div><div class="line">   </div><div class="line">    &lt;bean class=&quot;com.zdp.service.UserService&quot; id=&quot;userService&quot;/&gt;  </div><div class="line">        &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;/&gt;  </div><div class="line">        &lt;property name=&quot;logDao&quot; ref=&quot;logDao&quot;/&gt;  </div><div class="line">    &lt;/bean&gt;  </div><div class="line">       </div><div class="line">    &lt;!-- JTA事务传播特性 --&gt;  </div><div class="line">    &lt;tx:advice id=&quot;txAdviceJTA&quot; transaction-manager=&quot;txManager&quot;&gt;  </div><div class="line">        &lt;tx:attributes&gt;  </div><div class="line">            &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt;  </div><div class="line">            &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;add*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt;  </div><div class="line">            &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;create*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt;  </div><div class="line">            &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt;  </div><div class="line">            &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;del*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt;  </div><div class="line">            &lt;tx:method isolation=&quot;DEFAULT&quot; name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;Exception/&quot;&gt;  </div><div class="line">            &lt;tx:method name=&quot;*&quot; read-only=&quot;true/&quot;&gt;   </div><div class="line">        &lt;/tx:attributes&gt;  </div><div class="line">    &lt;/tx:advice&gt;  </div><div class="line">            </div><div class="line">           </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h3 id="4、service业务类："><a href="#4、service业务类：" class="headerlink" title="4、service业务类："></a>4、service业务类：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class UserService &#123;  </div><div class="line">    private UserDao userDao;  </div><div class="line">    private LogDao logDao;  </div><div class="line">   </div><div class="line">    public void saveUser(String id, String name) &#123;  </div><div class="line">        userDao.insertUser(id, name);  </div><div class="line">        // int i = 1 / 0;  // 制造异常  </div><div class="line">        logDao.insertLog(id, id + _ + name);  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public UserDao getUserDao() &#123;  </div><div class="line">        return userDao;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public void setUserDao(UserDao userDao) &#123;  </div><div class="line">        this.userDao = userDao;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public LogDao getLogDao() &#123;  </div><div class="line">        return logDao;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public void setLogDao(LogDao logDao) &#123;  </div><div class="line">        this.logDao = logDao;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5、dao类："><a href="#5、dao类：" class="headerlink" title="5、dao类："></a>5、dao类：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class UserDao extends JdbcDaoSupport &#123;  </div><div class="line">    public void insertUser(String id, String name) &#123;  </div><div class="line">        JdbcTemplate template = getJdbcTemplate();  </div><div class="line">        template.execute(insert into user values(&apos; + id + &apos;,&apos; + name + &apos;));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class LogDao extends JdbcDaoSupport &#123;  </div><div class="line">    public void insertLog(String id, String content) &#123;  </div><div class="line">        JdbcTemplate template = getJdbcTemplate();  </div><div class="line">        template.execute(insert into log values(&apos; + id + &apos;,&apos; + content + &apos;));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6、测试类："><a href="#6、测试类：" class="headerlink" title="6、测试类："></a>6、测试类：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class UserTest &#123;  </div><div class="line">    @Test  </div><div class="line">    public void testSave() &#123;  </div><div class="line">        ApplicationContext cxt = new ClassPathXmlApplicationContext(ApplicationContext.xml);  </div><div class="line">        UserService us = (UserService) cxt.getBean(userService);  </div><div class="line">        us.saveUser(1, zhangsan);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      java分布式事务:spring+JTA+jotm
    
    </summary>
    
      <category term="java" scheme="http://jishusuishouji.github.io/categories/java/"/>
    
    
      <category term="spring" scheme="http://jishusuishouji.github.io/tags/spring/"/>
    
      <category term="java" scheme="http://jishusuishouji.github.io/tags/java/"/>
    
      <category term="jta" scheme="http://jishusuishouji.github.io/tags/jta/"/>
    
      <category term="jotm" scheme="http://jishusuishouji.github.io/tags/jotm/"/>
    
  </entry>
  
</feed>
